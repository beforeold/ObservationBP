// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ObservationBPImpl
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import ObservationBPImpl
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_spi(SwiftUI) public struct ObservationTracking : Swift.Sendable {
  @_spi(SwiftUI) public struct _AccessList : Swift.Sendable {
  }
  #if compiler(>=5.3) && $Sendable
  @_spi(SwiftUI) public static func _installTracking(_ tracking: ObservationBPImpl.ObservationTracking, willSet: (@Sendable (ObservationBPImpl.ObservationTracking) -> Swift.Void)? = nil, didSet: (@Sendable (ObservationBPImpl.ObservationTracking) -> Swift.Void)? = nil)
  #endif
  #if compiler(>=5.3) && $Sendable
  @_spi(SwiftUI) public static func _installTracking(_ list: ObservationBPImpl.ObservationTracking._AccessList, onChange: @escaping @Sendable () -> Swift.Void)
  #endif
  @_spi(SwiftUI) public init(_ list: ObservationBPImpl.ObservationTracking._AccessList?)
  @_spi(SwiftUI) public func cancel()
}
#if compiler(>=5.3) && $Sendable
public func withObservationTracking<T>(_ apply: () -> T, onChange: @autoclosure () -> @Sendable () -> Swift.Void) -> T
#endif
#if compiler(>=5.3) && $Sendable
@_spi(SwiftUI) public func withObservationTracking<T>(_ apply: () -> T, willSet: @escaping @Sendable (ObservationBPImpl.ObservationTracking) -> Swift.Void, didSet: @escaping @Sendable (ObservationBPImpl.ObservationTracking) -> Swift.Void) -> T
#endif
#if compiler(>=5.3) && $Sendable
@_spi(SwiftUI) public func withObservationTracking<T>(_ apply: () -> T, willSet: @escaping @Sendable (ObservationBPImpl.ObservationTracking) -> Swift.Void) -> T
#endif
#if compiler(>=5.3) && $Sendable
@_spi(SwiftUI) public func withObservationTracking<T>(_ apply: () -> T, didSet: @escaping @Sendable (ObservationBPImpl.ObservationTracking) -> Swift.Void) -> T
#endif
public protocol Observable {
}
public struct ObservationRegistrar : Swift.Sendable {
  public init()
  public func access<Subject, Member>(_ subject: Subject, keyPath: Swift.KeyPath<Subject, Member>) where Subject : ObservationBPImpl.Observable
  public func willSet<Subject, Member>(_ subject: Subject, keyPath: Swift.KeyPath<Subject, Member>) where Subject : ObservationBPImpl.Observable
  public func didSet<Subject, Member>(_ subject: Subject, keyPath: Swift.KeyPath<Subject, Member>) where Subject : ObservationBPImpl.Observable
  public func withMutation<Subject, Member, T>(of subject: Subject, keyPath: Swift.KeyPath<Subject, Member>, _ mutation: () throws -> T) rethrows -> T where Subject : ObservationBPImpl.Observable
}
extension ObservationBPImpl.ObservationRegistrar : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder)
}
extension ObservationBPImpl.ObservationRegistrar : Swift.Hashable {
  public static func == (lhs: ObservationBPImpl.ObservationRegistrar, rhs: ObservationBPImpl.ObservationRegistrar) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
